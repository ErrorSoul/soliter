function init(self)
	-- Значения карты, будут переданы при создании
	self.value = 2      -- Значение карты (2-9)
	self.suit = "red"   -- Масть карты ("red", "blue", и т.д.)
	self.is_face_up = false -- Видна ли карта лицом вверх
	self.is_dragon = false  -- Это дракон?
	self.is_flower = false  -- Это цветок?
	self.flying = false
	self.owner = nil

	self.is_highlighted = false
	-- Сохраняем начальный цвет спрайта
	self.normal_tint = vmath.vector4(1, 1, 1, 1)
	self.highlight_tint = vmath.vector4(1.2, 1.2, 0.8, 1) -- Желтоватое свечение
	self.is_highlighted = true
	-- sprite.set_constant("#sprite", "tint", self.highlight_tint)
	go.set_position(vmath.vector3(go.get_position().x,
	go.get_position().y,
	0.2))
	-- local size = go.get("#sprite", "size")
	-- print("SIZE", size)
	-- msg.post("#collisionobject", "disable")
	--msg.post(".", "acquire_input_focus")
        pprint(go.get_id())
end

function set_card(self, value, suit, is_dragon, is_flower, owner)
	self.value = value
	self.suit = suit
	self.is_dragon = is_dragon or false
	self.is_flower = is_flower or false
	self.owner = owner

	-- Меняем текстуру спрайта карты
	self.sprite_id = tostring(value) .. "_" .. suit   -- Например, "hearts_1"
	msg.post("#sprite", "play_animation", {id = hash(self.sprite_id)})

end

function is_correct_card(self, selected_card)
   pprint('selected', selected_card)
   if self.is_flower or self.is_dragon then
      return false
   end
   if selected_card.data.value == 'd' or selected_card.data.value == 'f' then
      return false
   end
   if self.suit ~= selected_card.data.suit and self.value == selected_card.data.value + 1 then
      return true
   end
end

function on_message(self, message_id, message, sender)
   pprint("[CARD]", message_id)
	if message_id == hash("can_pick_up") then
		if self.current_slot then
			-- Если карта в слоте, очищаем слот
			msg.post(self.current_slot, "clear_slot")
		end
		msg.post(sender, "card_pickable")

	elseif message_id == hash("start_drag") then
		self.is_dragging = true

	elseif message_id == hash("drag_update") and self.is_dragging then
		go.set_position(message.position + vmath.vector3(0, 0, 0.3))

	elseif message_id == hash("drop_success") then
		self.is_dragging = false

		msg.post(message.slot_id, "occupy_slot", message.card)

		go.set_position(message.position + vmath.vector3(0, 0, 0.001))
                msg.post(self.owner, 'remove_card', {id = go.get_id()})
                self.owner = message.slot_id
	elseif message_id == hash("drop_failed") then
		self.is_dragging = false
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD,
		message.position, go.EASING_OUTQUAD, 0.3)
        elseif message_id == hash("can_move_card") then
		self.is_dragging = false
		if is_correct_card(self, message.card) then
                   msg.post(sender, 'valid_card')
                else
                   msg.post(sender, 'invalid_card')
                end


	elseif message_id == hash("set_card") then
		set_card(self, message.data.value, message.data.suit,
		message.data.is_dragon, message.data.is_flower, message.slot_id)
	end

	if message_id == hash("highlight") then
		self.is_highlighted = true
		sprite.set_constant("#sprite", "tint", self.highlight_tint)
		go.set_position(vmath.vector3(go.get_position().x,
		go.get_position().y,
		0.2))
	elseif message_id == hash("unhighlight") then
		self.is_highlighted = false
		sprite.set_constant("#sprite", "tint", self.normal_tint)
		go.set_position(vmath.vector3(go.get_position().x,
		go.get_position().y,
		0.2))
	end
end

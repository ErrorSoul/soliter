-- cursor.script
go.property("selected_card", nil)
function init(self)
   -- Отключаем лишние сообщения о коллизиях
   self.is_processing = false
   self.valid = false
   -- Получаем размеры окна при старте
   self.tableau_stacks = {}
   self.last_cards = {}
   self.was_pressed = false
   self.size = vmath.vector3(90, 150, 0)
   self.half_size = self.size * 0.5
   self.btn_size = vmath.vector3(32, 32, 0)
   self.half_btn_size = self.btn_size * 0.5
   self.dragging_stack = false
   self.base_slot_trace = {
      red = "base_slot1",
      blue = "base_slot2",
      green = "base_slot3"
   }
   self.dragon_button_trace = {
      red = "dragon_button1",
      blue = "dragon_button2",
      green = "dragon_button3"
   }
   self.stack_offset = {}  -- Сохраняем смещение каждой карты относительно первой
   msg.post(".", "acquire_input_focus")
   -- Draw colored text on the screen
end

function on_input(self, action_id, action)
   self.cursor_pos = vmath.vector3(action.x, action.y, 0)
   go.set_position(self.cursor_pos, ".")


   if action_id == hash("space") then

      if action.pressed then
         msg.post("@system:", "toggle_physics_debug") -- <3>
      else
         msg.post("@system:", "toggle_physics_debug") -- <3>
      end
   end
   if action_id == hash("touch") then
      if action.pressed then
         self.was_pressed = true
         local btn_color = check_dragon_buttons(self, action.x, action.y)

         if btn_color then
            pprint('BUTTON COLOR', btn_color)
            self.pending_drop = btn_color
            msg.post(btn_color.slot_id, 'get_dragon_cards')
            return
         end

         local card = check_tableau_slots(self, action.x, action.y)
         if card then
            self.selected_card = card.id
            self.selected_card_data = card.source
            self.is_dragging = true
            self.dragging_stack = card.is_stack
            self.is_single_card = card.is_single

            if card.is_stack then
               self.stack_cards = card.stack
            end

            self.original_position = card.pos

            if self.dragging_stack then
               -- Начинаем тащить стопку
               for _, stack_card in ipairs(self.stack_cards) do
                   msg.post(stack_card.id, "start_drag")
               end
            else
               -- Тащим одну карту
               msg.post(self.selected_card, "start_drag")
            end
            return
         end

         local free_slot = check_free_slots(self, action.x, action.y)

         if free_slot then
            self.pending_drop = free_slot
            msg.post(free_slot.slot_id, "can_pick_card")
            return
         end



      elseif action.released then
         self.was_pressed = false

         if self.is_dragging then
            -- Проверяем различные слоты

            -- Если тащим стопку, разрешаем дроп только в tableau слоты
            if self.dragging_stack then
               local tableau_slot = check_free_tableau_slots(self, action.x, action.y)
               if tableau_slot then
                  self.pending_drop = {slot = tableau_slot}
                  msg.post(tableau_slot.slot_id, "check_slot", {
                              cards = self.stack_cards,
                              source_card = self.selected_card_data
                  })
                  return
               end

               local card = check_last_cards(self, action.x, action.y)
               if card then

                  self.pending_drop = {card = card, slot_id = card.slot_id}
                  msg.post(card.id, "can_move_card", {card = self.selected_card_data})
                  return
               end

               -- Возвращаем стопку на место при попытке дропа в неразрешенный слот
               for _, card in ipairs(self.stack_cards) do
                  msg.post(card.id, "drop_failed", {
                              position = self.original_position + card.relative_pos
                  })
               end
               -- Возвращаем карту на место если никуда не попали
               --msg.post(self.selected_card, 'drop_failed', {position = self.original_position})

               clean_cursor(self)
               return
            end

            local card = check_last_cards(self, action.x, action.y)
            if card then

               self.pending_drop = {card = card, slot_id = card.slot_id}
               msg.post(card.id, "can_move_card", {card = self.selected_card_data})
               return
            end

            local free_slot = check_free_slots(self, action.x, action.y)
            -- Обработка перемещения одиночной карты
            if free_slot then
               self.pending_drop = {slot = free_slot}
               msg.post(free_slot.slot_id, 'check_slot')
               return
            end

            local flower_slot = check_flower_slot(self, action.x, action.y)
            if flower_slot then
               self.pending_drop = {slot = flower_slot}
               msg.post(flower_slot.slot_id, "check_slot", {card = self.selected_card_data})
               return
            end

            local base_slot = check_base_slots(self, action.x, action.y)
            if base_slot then
               self.pending_drop = {slot = base_slot}
               msg.post(base_slot.slot_id, 'check_slot', {card = self.selected_card_data})
               return
            end

            local tableau_slot = check_free_tableau_slots(self, action.x, action.y)
            if tableau_slot then
               self.pending_drop = {slot = tableau_slot}
               msg.post(tableau_slot.slot_id, 'check_slot', {card = self.selected_card_data})
               return
            end

          -- Возвращаем карту на место если никуда не попали
         msg.post(self.selected_card, 'drop_failed', {position = self.original_position})

         end
      end

      -- Обновление позиций при перетаскивании
      if self.is_dragging then
         if self.dragging_stack then
            for _, card in ipairs(self.stack_cards) do
               msg.post(card.id, "drag_update", {
                   position = self.cursor_pos + card.relative_pos
               })
            end
         else
            msg.post(self.selected_card, "drag_update", {position = self.cursor_pos})
         end
      end


   end
end

function move_stack_cards(self, message_id, params)
   for _, card in ipairs(self.stack_cards) do
       msg.post(card.id, message_id, {
                  card = card.source,
                  slot_id = params.slot_id,
                  position = card.relative_pos + params.position
      })
   end
end

local function set_cursor(slots, params)
   local p = params or {}
   for slot_id, _ in pairs(slots) do
      msg.post(slot_id, "set_cursor", {slot_id = slot_id, params=p})
   end
end

function on_message(self, message_id, message, sender)
   if not message_id == hash('drag_update') then
      print("[CURSOR]", message_id)
   end

   if message_id == hash("set_free_slots") then
      self.free_slots = message
      set_cursor(self.free_slots, self.dragon_button_trace)
   elseif message_id == hash("set_flower_slot") then
      self.flower_slot = message
   elseif message_id == hash("set_base_slots") then
      self.base_slots = message
      set_cursor(self.base_slots)

   elseif message_id == hash("set_tableau_slots") then
      self.tableau_slots = message
   elseif message_id == hash("set_dragon_buttons") then
      self.dragon_buttons = message
      pprint("DRG BUTTON", self.dragon_buttons)
   elseif message_id == hash("set_cards") then
      self.cards = message
   elseif message_id == hash("set_stack") then
      self.tableau_stacks[message.index] = message.stack
      local empty_flag = (#message.stack == 0)
      self.tableau_slots['tableau_slot'..message.index].is_empty = empty_flag

   elseif message_id == hash("set_last_cards") then
      self.last_cards[message.index] = message.card
   elseif message_id == hash("slot_valid") and self.pending_drop then
      local params = {
         slot_id =  self.pending_drop.slot.slot_id,
         position = self.pending_drop.slot.slot_pos,
         card = self.selected_card_data
      }

      if self.dragging_stack then
         move_stack_cards(self, 'drop_success', params)
      else
         msg.post(self.selected_card, 'drop_success', params)
      end

      clean_cursor(self)
   elseif message_id == hash("slot_invalid") and self.pending_drop then
      msg.post(self.selected_card, 'drop_failed', {position = self.original_position})
      clean_cursor(self)
   elseif message_id == hash("invalid_card")  then
      if self.is_dragging then
         if self.dragging_stack then
            for _, card in ipairs(self.stack_cards) do
               msg.post(card.id, "drop_failed", {
                   position = self.original_position + card.relative_pos
               })
            end
         else
            msg.post(self.selected_card, 'drop_failed', {position = self.original_position})
         end
      end

      clean_cursor(self)
   elseif message_id == hash("valid_card") and self.pending_drop then
      local params = {
         position = (self.pending_drop.card.pos + vmath.vector3(0, -40, 0)),
         slot_id = self.pending_drop.slot_id,
         card = self.selected_card_data
      }

      if self.dragging_stack then
         move_stack_cards(self, 'drop_success', params)
      else
         msg.post(self.selected_card, 'drop_success', params)
      end

      clean_cursor(self)
   elseif message_id == hash("slot_with_card") and self.pending_drop then
      self.selected_card = message.id
      self.selected_card_data = message
      self.is_dragging = true
      self.original_position = self.pending_drop.slot_pos
      msg.post(self.selected_card, "start_drag")
   elseif message_id == hash("send_to_flower_slot") then
      msg.post(message.id, 'drop_success', {
                  slot_id = 'flower_slot',
                  position = self.flower_slot['flower_slot'],
                  card = message,
                  animation = true
      })
   elseif message_id == hash("base_slot_full") then
      self.base_slots[message.slot_id].is_empty = false
   elseif message_id == hash("send_to_base_slot") then
      local slot = self.base_slot_trace[message.data.suit]
      local is_empty = self.base_slots[slot].is_empty
      if not is_empty then
         for slot_id, sl in pairs(self.base_slots) do
            if sl.is_empty then
               slot = slot_id
               break
            end
         end
      end

      msg.post(message.id, 'drop_success', {
                  slot_id = slot,
                  position = self.base_slots[slot].pos,
                  card = message,
                  animation = true
      })
   elseif message_id == hash("update_free_slot") then
      self.free_slots[message.slot_id].is_empty = message.is_empty
      self.free_slots[message.slot_id].dragon = message.dragon
      pprint("update_free_slot", self.free_slots)
   elseif message_id == hash("set_button_state") then
      self.dragon_buttons[message.slot_id].is_active = message.is_active
   elseif message_id == hash("get_dragon_cards") and self.pending_drop then
      for _, card in pairs(message) do
         --pprint("A", card)
         msg.post(card.id, 'drop_success', {
                  slot_id = 'free_slot1',
                  position = self.free_slots['free_slot1'].pos,
                  card = card,
                  animation = true,
                  complete = true
      })
      end


   end
end

function clean_cursor(self)
   self.selected_card = nil
   self.selected_card_data = nil
   self.is_dragging = false
   self.dragging_stack = false
   self.is_single_card = false
   self.stack_cards = nil
   self.current_slot = nil
   self.pending_drop = nil
end

local function is_point_in_rect(x, y, rect_pos, half_size)
   return (x > rect_pos.x - half_size.x and
           x < rect_pos.x + half_size.x and
           y > rect_pos.y - half_size.y and
           y < rect_pos.y + half_size.y)
end

function check_tableau_slots(self, cursor_x, cursor_y)
   for stack_index, stack in ipairs(self.tableau_stacks) do
      -- Проверяем только непустые стопки
      if #stack > 0 then
         -- Получаем последнюю карту в стопке
         local last_card_index = #stack
         local last_card = stack[last_card_index]
         local last_card_pos = go.get_position(last_card.id)

         -- Если это последняя карта и курсор над ней
         if is_point_in_rect(cursor_x, cursor_y, last_card_pos, self.half_size) then
            return {
               type = "tableau",
               id = last_card.id,
               stack_index = stack_index,
               card_index = last_card_index,
               is_single = true,  -- Флаг, что это одиночная карта
               pos = last_card_pos,
               slot_id = last_card.slot_id,
               source = last_card
            }
         end

         -- Проверяем остальные карты в стопке (кроме последней)
         for card_index = last_card_index - 1, 1, -1 do
            local card = stack[card_index]
            local card_pos = go.get_position(card.id)

            if is_point_in_rect(cursor_x, cursor_y, card_pos, self.half_size) then
               -- Собираем стопку карт, начиная с выбранной
               local selected_stack = {}
               local base_pos = card_pos

               for i = card_index, #stack do
                   local stack_card = stack[i]
                   local relative_pos = go.get_position(stack_card.id) - base_pos
                   table.insert(selected_stack, {
                       id = stack_card.id,
                       source = stack_card,
                       relative_pos = relative_pos
                   })
               end

               return {
                  type = "tableau",
                  id = card.id,
                  stack_index = stack_index,
                  card_index = card_index,
                  stack = selected_stack,
                  is_stack = true,  -- Флаг, что это стопка карт
                  pos = card_pos,
                  slot_id = card.slot_id,
                  source = card
               }
            end
         end
      end
   end
   return nil
end

local function is_card_in_stack(card_id, stack_cards)
    if not stack_cards then return false end

    for _, stack_card in ipairs(stack_cards) do
        if stack_card.id == card_id then
            return true
        end
    end
    return false
end

function check_last_cards(self, cursor_x, cursor_y)

   -- Если курсор над стопкой, проверяем каждую карту в стопке
   for stack_index, card in pairs(self.last_cards) do
        local card_pos = go.get_position(card.id)

      -- Проверяем, находится ли курсор над картой
      if card.id ~= self.selected_card and
         not is_card_in_stack(card.id, self.stack_cards) and
         is_point_in_rect(cursor_x, cursor_y, card_pos, self.half_size) then

         return {
            type = "tableau",
            id  = card.id,
            stack_index = stack_index,
            card_index = card_index,
            card_data = card.data,
            data_id = card.data.id,
            slot_id = card.slot_id,
            pos = card_pos,
            source = card
         }
      end
   end
   -- Если курсор не над стопкой, возвращаем nil
   return nil
end

function check_free_slots(self, cursor_x, cursor_y)
   for slot_id, slot in pairs(self.free_slots) do
      if is_point_in_rect(cursor_x, cursor_y, slot.pos, self.half_size) then
         return {slot_id = slot_id, slot_pos = slot.pos}
      end
   end
end

function check_flower_slot(self, cursor_x, cursor_y)
   local slot_id = 'flower_slot'
   if is_point_in_rect(cursor_x, cursor_y, self.flower_slot[slot_id], self.half_size) then
      return {slot_id = slot_id, slot_pos = self.flower_slot[slot_id]}
   end
end

function check_base_slots(self, cursor_x, cursor_y)
   for slot_id, slot in pairs(self.base_slots) do
      if is_point_in_rect(cursor_x, cursor_y, slot.pos, self.half_size) then
         return {slot_id = slot_id, slot_pos = slot.pos}
      end
   end
end

function check_free_tableau_slots(self, cursor_x, cursor_y)
   for slot_id, slot in pairs(self.tableau_slots) do

      if slot.is_empty and is_point_in_rect(cursor_x, cursor_y, slot.pos, self.half_size) then
         return {slot_id = slot_id, slot_pos = slot.pos}
      end
   end
end

function check_dragon_buttons(self, cursor_x, cursor_y)
   for btn_id, btn in pairs(self.dragon_buttons) do
      if btn.is_active and is_point_in_rect(cursor_x, cursor_y, btn.pos, self.half_btn_size) then
         return {slot_id = btn_id, color = btn.sprite}
      end
   end
end


function update(self, dt)
   -- Преобразуем все объекты в строки и объединяем их
   local debug_string = "selected_card: " .. tostring(self.selected_card_data and self.selected_card_data.data_id or nil) .. "\n" ..
      "is_dragging: " .. tostring(self.is_dragging) .. "\n" ..
      "current_slot: " .. tostring(self.current_slot) .. "\n" ..
      "can_drop: " .. tostring(self.can_drop) .. "\n" ..
      "potential_card: " .. tostring(self.potential_card) .. "\n"..
      "message: " .. tostring(self.mes) .. "\n" ..
      "overlapped_card: " .. tostring(self.overlapped_card) .. "\n"

   local color_green = vmath.vector4(0, 1, 0, 1)
   msg.post("@render:", "draw_debug_text", { text = debug_string, position = vmath.vector3(800, 780, 0), color = color_green })
end
--8BYNTX0E

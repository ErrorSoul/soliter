-- cursor.script
go.property("selected_card", nil)

function init(self)
	-- Отключаем лишние сообщения о коллизиях
	self.is_processing = false
	self.valid = false
	msg.post(".", "acquire_input_focus")
	-- Draw colored text on the screen
	
	
end


function on_input(self, action_id, action)
	self.cursor_pos = vmath.vector3(action.x, action.y, 0)
	
	if action_id == hash("space") then
		
		if action.pressed then
			msg.post("@system:", "toggle_physics_debug") -- <3>
		else
			msg.post("@system:", "toggle_physics_debug") -- <3>
		end
	end
	if action_id == hash("touch") then
		

		if action.pressed then
			self.was_pressed = true
			
			print("[pressed")
			-- Если есть карта под курсором, сразу пробуем её поднять
			if self.overlapped_card and not self.is_dragging then
				print('_______________')
				msg.post(self.overlapped_card, "can_pick_up")
				self.potential_card = self.overlapped_card
			end
		elseif action.released then
			
			self.was_pressed = false
			if self.is_dragging and self.selected_card then
				if self.current_slot and self.can_drop then
					msg.post(self.selected_card, "drop_success", {
						position = go.get_position(self.current_slot),
						slot_id = self.current_slot
					})
					msg.post(self.current_slot, "occupy_slot", {card_id = self.selected_card})
					self.overlapped_card = nil
				else
					
					msg.post(self.selected_card, "drop_failed", {position = self.original_position})
				end
				clean_cursor(self)
			end
		end

		if self.is_dragging and self.selected_card then
			msg.post(self.selected_card, "drag_update", {position = cursor_pos})
		end
	end
end

function on_message(self, message_id, message, sender)
	self.mes = message_id
	if message_id == hash("trigger_response") then
		if message.enter then
			if message.group == hash("card") then
				self.overlapped_card = message.other_id
				-- Если уже нажата кнопка мыши, сразу пробуем поднять карту
				print('uuuuuuuuuuu')
				if self.was_pressed and not self.is_dragging then
					msg.post(message.other_id, "can_pick_up")
					self.potential_card = message.other_id
				end
			elseif message.group == hash("free_slots") and self.is_dragging then
				msg.post(message.other_id, "check_slot")
				self.current_slot = message.other_id
			end
		else -- exit from collision
			if message.group == hash("card") and message.other_id == self.overlapped_card then
				self.overlapped_card = nil
			elseif message.group == hash("free_slots") and message.other_id == self.current_slot then
				self.current_slot = nil
				self.can_drop = false
			end
		end
	elseif message_id == hash("slot_valid") then
		self.can_drop = true
	elseif message_id == hash("slot_invalid") then
		self.can_drop = false
	elseif message_id == hash("card_pickable") then
		self.selected_card = self.potential_card
		self.is_dragging = true
		self.original_position = go.get_position(self.selected_card)
		msg.post(self.selected_card, "start_drag")
		self.potential_card = nil
	end
end

function clean_cursor(self)
	self.selected_card = nil
	self.is_dragging = false
	self.current_slot = nil
	self.can_drop = false
	self.potential_card = nil
	-- overlapped_card не очищаем, так как он отслеживает карту под курсором
end
function update(self, dt)
	go.set_position(self.cursor_pos, ".")
	-- Преобразуем все объекты в строки и объединяем их
	local debug_string = "selected_card: " .. tostring(self.selected_card) .. "\n" ..
	"is_dragging: " .. tostring(self.is_dragging) .. "\n" ..
	"current_slot: " .. tostring(self.current_slot) .. "\n" ..
	"can_drop: " .. tostring(self.can_drop) .. "\n" ..
	"potential_card: " .. tostring(self.potential_card) .. "\n"..
	"message: " .. tostring(self.mes) .. "\n" ..
	"overlapped_card: " .. tostring(self.overlapped_card) .. "\n"
	
	local color_green = vmath.vector4(0, 1, 0, 1)
	msg.post("@render:", "draw_debug_text", { text = debug_string, position = vmath.vector3(800, 780, 0), color = color_green })
end
-- function on_message(self, message_id, message, sender)
-- 	if message_id == hash("trigger_response") then
-- 		if message.enter and message.group == hash("card") then
-- 			-- Если курсор на карте и был клик - начинаем перетаскивание
-- 			if self.was_pressed and not self.is_dragging then
-- 				self.selected_card = message.other_id
-- 				self.is_dragging = true
-- 				self.original_position = go.get_position(self.selected_card)
-- 				msg.post(self.selected_card, "start_drag")
-- 			end
-- 		end
-- 	end
-- end

-- function on_message(self, message_id, message, sender)
-- 	if message_id == hash("trigger_response") and not self.is_dragging then
-- 		if message.enter then
-- 			if message.group == hash("card") then
-- 				-- Сохраняем ID карты и её изначальную позицию
-- 				self.selected_card = message.other_id
-- 				self.original_position = go.get_position(self.selected_card)
-- 				print("Card detected:", self.selected_card)
-- 				print("Card old position:", self.original_position)
-- 			
-- 			end
-- 		end
-- 	end
-- end
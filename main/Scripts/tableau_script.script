function init(self)
    self.is_empty = false
end
local function remove_by_id(tbl, target_id)
   for i, item in ipairs(tbl) do
      if item.id == target_id then
         table.remove(tbl, i) -- Удаляем элемент по индексу
         return true -- Успешно удалено
      end
   end
   return false -- Элемент не найден
end

local function reverse_table(tbl)
    local reversed = {}
    for i = #tbl, 1, -1 do
        table.insert(reversed, tbl[i])
    end
    return reversed
end


function on_message(self, message_id, message, sender)
   if message_id == hash("update_stack") then
      self.stack = message.stack
      self.index = message.index
      self.cursor = message.cursor
      local card = reverse_table(self.stack)[1]
      if card.data.value == 'f' then
         pprint("CAAAAA", card)
         msg.post(self.cursor, 'send_to_flower_slot', card)
      end


      update_visible_cards(self)
   elseif message_id == hash("remove_card") then
      if remove_by_id(self.stack, message.id) then
         msg.post(self.cursor, 'set_stack', {index = self.index, stack = self.stack})
         if #self.stack == 0 then
            self.is_empty = true
            print("EMPTY SLOT !!!!!!!!!!!!!!!!!!")
         end
      end
      update_visible_cards(self)
   elseif message_id == hash("occupy_slot") then
      message.slot_id = go.get_id()
      table.insert(self.stack, message)
      update_visible_cards(self)
   elseif message_id == hash("check_slot") then
      if self.is_empty then
         msg.post(sender, "slot_valid")
      else
         msg.post(sender, "slot_invalid")
      end
   end
end

function update_visible_cards(self)
   local visible_cards = {}
   -- print("Начинаем проверку стопки из " .. #self.stack .. " карт")

   -- Проходим по стопке карт снизу вверх (от 1 до #self.stack)
   for i = #self.stack, 1, -1 do
      local current_card = self.stack[i]

      -- print("Проверяем карту " .. tostring(current_card.data.value) .. tostring(current_card.data.suit) .. " на индексе " .. i)
      -- print(string.format("Card %d: %s %s", i, current_card.data.value, current_card.data.suit))

      if #visible_cards == 0 then
         -- Первая карта всегда видима
         -- print("  Добавляем как первую карту")
         table.insert(visible_cards, current_card)
      elseif can_stack_cards(visible_cards[#visible_cards], current_card)  then
         -- pprint("Нижняя карта " .. visible_cards[#visible_cards].data.value .. visible_cards[#visible_cards].data.suit)
         -- pprint("Верхняя карта " .. current_card.data.value .. current_card.data.suit)

         -- elseif can_stack_cards(visible_cards[#visible_cards], current_card) then
         -- Если текущая карта может быть сложена на последнюю видимую карту
         -- print("  Можно добавить к последовательности")
         table.insert(visible_cards, current_card)
      else
         -- Если карта не подходит для стека, останавливаем проверку
         -- print("  Карта не подходит, останавливаемся")
         break
      end
   end

   print("Найдено " .. #visible_cards .. " видимых карт")

   -- Обновляем состояние всех карт в стопке
   for i, card in ipairs(self.stack) do
      local is_visible = contains(visible_cards, card)
      local card_url = msg.url(nil, card.id,"collisionobject1")


      -- if is_visible then
      --    -- Включаем коллизию для видимых карт
      --    msg.post(card_url, "enable")
      -- else
      --    -- Выключаем коллизию для скрытых карт
      --    msg.post(card_url, "enable")
      -- end

      local z_index = (i == #self.stack) and 0.02 or 0.002 + i * 0.002
      -- print(string.format("slot id z index %s  %f", card.data.id, z_index))
      go.set_position(vmath.vector3(go.get_position(card.id).x, go.get_position(card.id).y, z_index), card.id)
      -- print(string.format("Card %d: %s %s %s", i, card.data.value, card.data.suit, go.get_position(card.id)))
      -- print(go.get_position(card.id))
   end

   -- Сохраняем список видимых карт
   self.visible_cards = visible_cards
   if self.index <= 8 then print("SENDING", self.index) end
   msg.post(self.cursor, "set_stack", { index = self.index, stack = reverse_table(self.visible_cards) })

   msg.post(self.cursor, "set_last_cards", { index = self.index, card = reverse_table(self.stack)[1] })
end

-- Функция для проверки, можно ли сложить карты в стопку
function can_stack_cards(bottom_card, top_card)
   if not bottom_card or not top_card then
      return false
   end
   -- Карты-драконы и цветы не могут участвовать в последовательности
   if bottom_card.data.is_flower or bottom_card.data.is_dragon or
      top_card.data.is_flower or top_card.data.is_dragon then
      return false
   end
   -- Разные масти и последовательные значения (например, 5 и 4)
   -- pprint("value bottom card", bottom_card.data.value, bottom_card.value)
   -- print("Совпадает ли масть ", bottom_card.data.suit ~= top_card.data.suit)
   -- print("Нижняя < Верхней ", bottom_card.data.value == top_card.data.value + 1)
   return bottom_card.data.suit ~= top_card.data.suit and bottom_card.data.value == top_card.data.value - 1
end
-- Вспомогательная функция для проверки наличия карты в массиве
function contains(arr, item)
   for _, v in ipairs(arr) do
      if v == item then
         return true
      end
   end
   return false
end
